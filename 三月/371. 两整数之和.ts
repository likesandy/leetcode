// 位运算
// 时间：O(log(max(a, b)))
// 空间：O1
// 通过与操作（&）和左移操作（<<）得到进位的部分
// 分为：进位 or 不进位两种情况
// 当a == 0, 只求 b or 0，当b == 0时，只求 a or 0
// 所以这个函数不管怎样，都会走到b == 0
// 该函数的时间复杂度为 O(log(max(a, b)))，其中 max(a, b) 表示 a 和 b 中的较大值。因为每次递归调用都将 a 和 b 的值缩小一半，因此最多需要递归 log(max(a, b)) 次。每次递归操作只涉及到异或操作和与运算和左移操作，这些操作的时间复杂度都是 O(1)，因此整个函数的时间复杂度为 O(log(max(a, b)))。
// 对于空间复杂度，由于该函数采用递归方式实现，每次递归调用都会生成一个新的函数栈帧，因此最多需要递归 log(max(a, b)) 层函数栈帧，每个函数栈帧中需要保存两个参数和一个返回值，因此每个函数栈帧需要的空间复杂度是 O(1)
function getSum(a: number, b: number): number {
  return b == 0 ? a : getSum(a ^ b, (a & b) << 1);
}
